#!/usr/bin/env python

from twisted.internet import gtk3reactor, protocol
from twisted.internet.protocol import Protocol, ClientCreator
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gio, GObject, Pango
from funky import *
from struct import unpack

reactor = gtk3reactor.install()

class ServerUI(Gtk.Box):
	def __setup_tags(self, buf):
		tag = buf.create_tag('font')
		tag.set_property('font', 'Lucida Console 8')

		tag = buf.create_tag('bold')
		tag.set_property('weight', Pango.Weight.BOLD)

		for x in ['red', 'blue', 'green',
				'cyan', 'magenta', 'yellow',
				'purple', 'black',
				'dark blue', 'dark green']:
			tag = buf.create_tag(x)
			tag.set_property('foreground', x)
			tag.set_property('foreground-set', True)

	def __init__(self):
		super(ServerUI, self).__init__(\
				orientation = Gtk.Orientation.VERTICAL,
				spacing = 6)

		self.text = Gtk.TextView()
		self.text.set_editable(False)
		self.text.set_cursor_visible(False)
		self.text.set_wrap_mode(Gtk.WrapMode.WORD)
		self.__setup_tags(self.text.get_buffer())
		scr = Gtk.ScrolledWindow()
		scr.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
		scr.add(self.text)

		self.pack_start(Gtk.Label('Server Messages'), False, True, 0)
		self.pack_start(scr, True, True, 0)

	def msg(self, msg, tags = []):
		tags.append('font')
		buf = self.text.get_buffer()
		i = buf.get_iter_at_offset(buf.get_char_count())
		buf.place_cursor(i)
		buf.insert_with_tags_by_name(i, msg, *tags)
		i = buf.get_iter_at_offset(buf.get_char_count())
		buf.place_cursor(i)

		if not '\n' in msg:
			return

		mark = buf.create_mark(None, i, left_gravity = True)
		self.text.scroll_to_mark(mark, 0.0, False, 0.0, 0.0)

	def on_rx_cmd(self, _, msg):
		self.msg('<<< ' + msg.cmd + '\n', ['bold'])

	def on_rx(self, _, msg):
		self.msg('<<< ' + str(msg) + '\n', ['dark green'])

	def on_tx(self, _, msg):
		self.msg('>>> ' + str(msg) + '\n', ['purple'])
		return

def encrypt(x):
	key = '$Revision: 1.183 $'
	x = client.LoginClientMsg(
		enctyp = 'XORP',
		enckey = key,
		nam = xorp(key, x.nam),
		pwd = xorp(key, x.pwd),
		client_type = xorp(key, x.client_type),
		client_id = xorp(key, x.client_id),
		jver = xorp(key, x.jver),
		osver = xorp(key, x.osver),
		client_ver = xorp(key, x.client_ver),
		mac = xorp(key, x.mac),
	)

	return x

class FunkProto(Protocol):
	def __init__(self, owner):
		self.owner = owner
		self.f = open('tx.log', 'w')

	def connectionMade(self):
		self.owner.conn_made(self)
	def dataReceived(self, data):
		self.owner.rx(data)
	def connectionLost(self, reason):
		self.owner.conn_lost(reason)

	def tx(self, d):
		b = d.get_bytes()
		self.f.write(b)
		self.f.flush()
		self.transport.write(b)

class FunkWindow(Gtk.Window):
	__gsignals__ = {
		'rx_msg': (GObject.SIGNAL_RUN_LAST, None, (object, )),
		'tx_msg': (GObject.SIGNAL_RUN_LAST, None, (object, )),
		'rx_cmd': (GObject.SIGNAL_RUN_LAST, None, (object, )),
		'tx_cmd': (GObject.SIGNAL_RUN_LAST, None, (object, )),
		'rx_ping': (GObject.SIGNAL_RUN_LAST, None, (object, )),
	}
	__disp = {
		server.PingServerMsg: 'rx_ping',
		server.CmdServerMsg: 'rx_cmd',
	}

	def on_rx_ping(self, _, msg):
		self.pong()

	def __init__(self):
		super(FunkWindow, self).__init__(type =
						Gtk.WindowType.TOPLEVEL)

		self.connect('rx_ping', self.on_rx_ping)
		self.connect('destroy', self.destroy)

		self.f = open('rx.log', 'w')
		self.__buf = ''
		self.__p = None
		self.__cr = ClientCreator(reactor, FunkProto, self)
		self.__c = self.__cr.connectTCP('game.brettspielwelt.de', 7670)

		self.set_default_size(320, 280)
		hb = Gtk.HeaderBar()
		hb.set_show_close_button(True)
		hb.props.title = 'FunKlient'
		self.set_titlebar(hb)

		self.stack = Gtk.Stack()
		self.stack.set_transition_type(\
				Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)
		self.stack.set_transition_duration(500)

		c = ServerUI()
		self.connect('rx_msg', c.on_rx)
		self.connect('rx_cmd', c.on_rx_cmd)
		self.connect('tx_msg', c.on_tx)
		self.stack.add_titled(c, 'server', 'Server Messages')
		self.stack.child_set_property(c, 'icon-name',
					'accessories-dictionary-symbolic')

		vb = Gtk.Box(orientation = Gtk.Orientation.VERTICAL,
				spacing = 6)
		vb.pack_start(self.stack, True, True, 0)
		vb.pack_start(self.stack, True, True, 0)
		self.add(vb)

		stack_switcher = Gtk.StackSwitcher()
		stack_switcher.set_stack(self.stack)
		hb = Gtk.HeaderBar()
		hb.set_show_close_button(True)
		hb.props.title = 'FunKlient'
		hb.pack_end(stack_switcher)
		self.set_titlebar(hb)


	def first_init(self):
		x = client.InitClientMsg()
		self.tx(x)

	def login(self, nam, pwd):
		x = client.LoginClientMsg(
			nam = nam,
			pwd = pwd,
			osver = 'amd64-4.4.0-31-generic-Linux',
			mac = '1015660640995 MAC:201564d3cb780 /fe80:0:0:0:d0e5:adff:feba:8c0%lxcbr0/10.0.3.1- MAC:a434d9c551ca/fe80:0:0:0:a634:d9ff:fec5:51ca%wlp4s0/172.20.10.5'
	)
		x = encrypt(x)
		self.tx(x)

	def refresh(self):
		x = client.RefreshClientMsg()
		self.tx(x)

	def game_start(self):
		x = client.GameStartClientMsg()
		self.tx(x)

	def tool_init(self, tool):
		x = client.ToolClientMsg(tool = tool)
		self.tx(x)

	def pong(self):
		x = client.PingClientMsg()
		self.tx(x)

	def cmd(self, cmd):
		x = client.CmdClientMsg(cmd = cmd)
		self.tx(x)

	def conn_made(self, p):
		self.__p = p
		self.first_init()
		self.login('funky1337', '')
		self.refresh()
		self.game_start()
		self.refresh()
		for x in ('BackTool', 'LobbyTool', 'UserGameTool',
				'GatherTool', 'TrennTool', 'NewsTool',
				'UserInfoTool', 'UserListTool', 'ChannelTool',
				'HelpTool', 'ArbeitsplatzTool', 'LastGameTool',
				'RemoteCmdTool'):
			self.tool_init(x)
		self.cmd('/ghook olli666')
		self.cmd('/join')

	def conn_lost(self, reason):
		print 'conn_lost', reason
		self.__p = None

	def rx_msg(self, t, b):
		c = server.msgmap.get(t, None)
		if c is None:
			#print 'UNKNOWN(%r), %r'%(t, b)
			return

		x = c.frombytes(b)

		self.emit('rx_msg', x)

		sig = self.__disp.get(c, None)
		if sig is None:
			return

		self.emit(sig, x)

	def rx(self, data):
		self.f.write(data)
		self.f.flush()
		self.__buf += data
		while len(self.__buf) >= 5:
			(hi, lo, t) = unpack('>BHH', self.__buf[:5])
			l = (hi << 16) | lo
			assert(l >= 5)
			if l > len(self.__buf):
				break
			b = self.__buf[5:l]
			self.__buf = self.__buf[l:]
			self.rx_msg(t, b)

	def tx(self, d):
		if self.__p is None:
			print '%r NOT SENT'%d
			return
		self.emit('tx_msg', d)
		self.__p.tx(d)

	def destroy(self, *_):
		super(FunkWindow, self).destroy()
		reactor.stop()

class FunKlient(Gtk.Application):
	def __init__(self):
		super(FunKlient, self).__init__(
				application_id = 'apps.fun.klient',
				flags = Gio.ApplicationFlags.FLAGS_NONE)
		self.connect('activate', self.on_activate)

	def on_activate(self, data = None):
		window = FunkWindow()
		window.show_all()
		self.add_window(window)


def main():
	app = FunKlient()
	reactor.registerGApplication(app)
	reactor.run()

if __name__ == '__main__':
	main()
