#!/usr/bin/env python3

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gdk, Gio, GObject, GLib

from funky import *

from struct import unpack
from pathlib import Path
from argparse import ArgumentParser
import sys
import asyncio

class FunkProto(asyncio.Protocol):
    __slots__ = (
        'owner',
        'transport',
        'rxlog',
        'txlog',
    )
    def __init__(self, owner):
        super().__init__()
        #super(FunkProto, self).__init__()
        self.owner = owner
        self.txlog = open('tx.log', 'wb')
        self.rxlog = open('rx.log', 'wb')

    def connection_made(self, transport):
        self.transport = transport
        self.owner.conn_made(self)

    def connection_lost(self, reason):
        self.owner.conn_lost(reason)

    def data_received(self, data):
        self.rxlog.write(data)
        self.rxlog.flush()
        self.owner.rx(data)

    def tx(self, b):
        self.txlog.write(b)
        self.txlog.flush()
        self.transport.write(b)

class Transport(asyncio.BaseTransport):
    __slots__ = (
        'conn',
    )
    def __init__(self, conn, extra = None):
        super().__init__(extra = extra)
        self.conn = conn
    def write(self, b):
        txf = self.conn.get_output_stream()
        txf.write_bytes(GLib.Bytes(b))

class FunkWindow(Gtk.Window):
    def __from_file(self, fn):
        f = open(fn)

        buf = f.read()

        while len(buf) >= 5:
            (hi, lo, t) = unpack('>BHH', buf[:5])
            l = (hi << 16) | lo
            assert(l >= 5)
            b = buf[5:l]

            buf = buf[l:]

            self.game.rx_msg(t, b)

    def __from_net(self):
        hostname = 'game.brettspielwelt.de'
        port = 7670
        addr = Gio.NetworkAddress.new(hostname, port)
        client = Gio.SocketClient.new()
        proto = FunkProto(self)

        def read_cb(obj, result, proto):
            f = proto.transport.conn.get_input_stream()
            b = f.read_bytes_finish(result)
            d = b.get_data()
            if not d:
                proto.connection_lost()
                return
            proto.data_received(d)
            f.read_bytes_async(8192, 1, None, read_cb, proto)

        def conn_cb(client, result, proto):
            conn = client.connect_finish(result)
            trans = Transport(conn)
            proto.connection_made(trans)
            f = proto.transport.conn.get_input_stream()
            f.read_bytes_async(8192, 1, None, read_cb, proto)

        client.connect_async(addr, None, conn_cb, proto)

    def __init__(self, read_log = None):
        def swin_cb(_, s):
            self.game.cl_cmd(s)
        def tx_cb(_, msg):
            self.tx(msg)
        def chat_cb(_, s):
            self.server_win.chat_msg(s)
        def log_cb(_, s):
            self.server_win.log(s)
        def unhandled_cb(_, msg):
            self.server_win.rx_msg(msg)

        def ps_cb(_, p, s):
            pstr = (None,
                'auction',
                'buy resources',
                'build cities',
                'fire plants',
                None,
                None,
                None,
                None,
                None,
                'Demolish plants',
                'Dispose of raw materials')
            p = pstr[p]
            hb = self.get_titlebar()
            if p is None:
                hb.props.title = 'FunKlient'
                return
            hb.props.title = 'FunKlient: [stufe-%d %s]'%(s + 1, p)

        def kb_alt_1(*_):
            self.stack.set_visible_child_name('game')
        def kb_alt_2(*_):
            self.stack.set_visible_child_name('server')
            self.server_win.entry.grab_focus()

        super(FunkWindow, self).__init__(type =
                        Gtk.WindowType.TOPLEVEL)

        self.connect('destroy', self.destroy)

        self.__buf = b''
        self.__p = None

        self.set_default_size(1280, 720)
        hb = Gtk.HeaderBar()
        hb.set_show_close_button(True)
        hb.props.title = 'FunKlient'
        self.set_titlebar(hb)

        accel = Gtk.AccelGroup()
        accel.connect(Gdk.keyval_from_name('Q'),
                Gdk.ModifierType.CONTROL_MASK,
                0,
                self.destroy)
        accel.connect(Gdk.keyval_from_name('W'),
                Gdk.ModifierType.CONTROL_MASK,
                0,
                self.destroy)
        accel.connect(Gdk.keyval_from_name('1'),
                Gdk.ModifierType.MOD1_MASK,
                0,
                kb_alt_1)
        accel.connect(Gdk.keyval_from_name('2'),
                Gdk.ModifierType.MOD1_MASK,
                0,
                kb_alt_2)
        self.add_accel_group(accel)
        self.set_mnemonic_modifier(0)

        self.stack = Gtk.Stack()
        self.stack.set_transition_type(\
                Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)
        self.stack.set_transition_duration(500)

        self.server_win = ServerWindow()
        self.server_win.connect('server_cmd', swin_cb)

        self.game_win = GameWindow()

        self.game = self.game_win.game
        self.game.connect('tx_msg', tx_cb)
        self.game.connect('chat_msg', chat_cb)
        self.game.connect('log', log_cb)
        self.game.connect('rx_unhandled', unhandled_cb)
        self.game.connect('update_ps', ps_cb)

        self.stack.add_titled(self.game_win,
                    'game',
                    'Game Window')
        self.stack.child_set_property(self.game_win,
                    'icon-name',
                    'system-users-symbolic')

        self.stack.add_titled(self.server_win,
                    'server',
                    'Server Messages')
        self.stack.child_set_property(self.server_win,
                    'icon-name',
                    'preferences-system-network-symbolic')

        vb = Gtk.Box(orientation = Gtk.Orientation.VERTICAL,
                spacing = 6)
        vb.pack_start(self.stack, True, True, 0)
        vb.pack_start(self.stack, True, True, 0)
        self.add(vb)

        stack_switcher = Gtk.StackSwitcher()
        stack_switcher.set_stack(self.stack)
        hb = Gtk.HeaderBar()
        hb.set_show_close_button(True)
        hb.props.title = 'FunKlient'
        hb.pack_end(stack_switcher)
        self.set_titlebar(hb)

        if read_log:
            self.__from_file(read_log)
        else:
            self.__from_net()

    def first_init(self):
        x = client.InitClientMsg()
        self.tx(x)

    def login(self, nam, pwd):
        x = client.LoginClientMsg(
            nam = nam,
            pwd = pwd,
            osver = 'amd64-4.4.0-31-generic-Linux',
            mac = '1015660640995 MAC:201564d3cb780 /fe80:0:0:0:d0e5:adff:feba:8c0%lxcbr0/10.0.3.1- MAC:a434d9c551ca/fe80:0:0:0:a634:d9ff:fec5:51ca%wlp4s0/172.20.10.5'
        )
        x = encrypt_login(x)
        self.tx(x)

    def refresh(self):
        x = client.RefreshClientMsg()
        self.tx(x)

    def game_start(self):
        x = client.GameStartClientMsg()
        self.tx(x)

    def tool_init(self, tool):
        x = client.ToolClientMsg(tool = tool)
        self.tx(x)

    def conn_made(self, p):
        login = (Path.home() / '.bsw-account').open().read()
        nam, pwd = login.rstrip('\r\n').split(':', 1)

        self.__p = p
        self.first_init()
        self.login(nam, pwd)
        self.refresh()
        self.game_start()
        self.refresh()
        for x in ('BackTool', 'LobbyTool', 'UserGameTool',
                'GatherTool', 'TrennTool', 'NewsTool',
                'UserInfoTool', 'UserListTool', 'ChannelTool',
                'HelpTool', 'ArbeitsplatzTool', 'LastGameTool',
                'RemoteCmdTool'):
            #self.tool_init(x)
            continue

    def conn_lost(self, reason):
        print('conn_lost', reason)
        self.__p = None

    def rx(self, data):
        self.__buf += data
        while len(self.__buf) >= 5:
            (hi, lo, t) = unpack('>BHH', self.__buf[:5])
            l = (hi << 16) | lo
            assert(l >= 5)
            if l > len(self.__buf):
                break
            b = self.__buf[5:l]
            self.__buf = self.__buf[l:]
            self.game.rx_msg(t, b)

    def tx(self, d):
        if self.__p is None:
            print('NOT SENT', d)
            return
        self.server_win.tx_msg(d)
        b = d.get_bytes()
        self.__p.tx(b)

    def destroy(self, *_):
        super(FunkWindow, self).destroy()
        try:
            # TODO stop
            pass
        except:
            pass

class FunKlient(Gtk.Application):
    def __init__(self, read_log = None):
        super(FunKlient, self).__init__(
                application_id = 'apps.fun.klient',
                flags = Gio.ApplicationFlags.FLAGS_NONE)
        #self.connect('activate', self.on_activate)
        self.read_log = read_log

    def do_activate(self, data = None):
        window = FunkWindow(self.read_log)
        window.show_all()
        self.add_window(window)
        window.present()

def main():
    opts = ArgumentParser(description='FunKlient - BSW Powergrid client')
    opts.add_argument('-r', '--read-log',
                metavar = 'path',
                type = str,
                help = 'Join a path to a config path')
    args = opts.parse_args()

    app = FunKlient(args.read_log)
    app.run(sys.argv)

if __name__ == '__main__':
    main()
